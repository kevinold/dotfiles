# After 
snippet after
	after(() => { 
		${1} 
	});

#	Each
snippet before
	before(() => {
		${1}
	});

# After Each
snippet afe
	afterEach(() => { 
		${1} 
	});

#	Before Each
snippet bee
	beforeEach(() => {
		${1}
	});


# Describe
snippet describe
	describe('${1:description}', () => {
		${2}
	});${3}	

# It
snippet it
	it('${1:description}', () => {
		${2}
	});${3}

# It stub
snippet its
	it('${1:description}');${2}

# Expect to be falsy
snippet ef
	expect(${1:target}).toBeFalsy();${2}

# Expect to be null
snippet en
	expect(${1:target}).toBeNull();${2}

# Expect to be truthy
snippet et
	expect(${1:target}).toBeTruthy();${2}

# Expect to contain
snippet ec
	expect(${1:target}).toContain(${2:value});${3}

# Expect to equal
snippet ee
	expect(${1:target}).toEqual(${2:value});${3}

# Expect to match
snippet em
	expect(${1:target}).toMatch(${2:pattern});${3}

# Expect to have been called
snippet ethb
	expect(${1:target}).toHaveBeenCalled();${2}

# Expect to have been called with
snippet ethbcw
	expect(${1:target}).toHaveBeenCalledWith(${2:arguments});${3}

# Expect
snippet exp
	expect(${1:target});${2}


# Runs
snippet ru
	runs(function() {
		${1}
	});${2}

# Spy on and call fake
snippet scf
	spyOn(${1:object}, '${2:method}').andCallFake(${3:function});${4}

# Spy on and call through
snippet sct
	spyOn(${1:object}, '${2:method}').andCallThrough();${3}

# Spy on and return
snippet sr
	spyOn(${1:object}, '${2:method}').andReturn(${3:arguments});${4}

# Spy on and throw
snippet st
	spyOn(${1:object}, '${2:method}').andThrow(${3:exception});${4}

# Spy on
snippet s
	spyOn(${1:object}, '${2:method}');${3}

# Waits
snippet wa
	waits(${1});${2}
